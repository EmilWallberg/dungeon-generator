import os
import platform as pf
from SCons.Script import *

vars = Variables(None, ARGUMENTS)
vars.Add(EnumVariable('BUILD_TYPE', 'type of build to use', 'debug',  allowed_values=('debug', 'release', 'profile')))
vars.Add(EnumVariable('COMPILEDB', 'Generate compile_commands.json', 'true',  allowed_values=('false', 'true')))
vars.Add(EnumVariable('platform', 'compile platform', 'current',  allowed_values=('macos', 'linux', 'windows', 'current')))
env = Environment(variables=vars)

if env["platform"] == 'current':
    platform = pf.system().lower()
else:
    platform = env["platform"]

sources = Glob("src/**.cpp")
env.Append(CPPPATH=["src/", "."])
build_type = ARGUMENTS.get('build', 'debug').lower()
output_dir = f'build/{platform}'

if not os.path.exists(output_dir):
    os.makedirs(output_dir)

env['BUILD'] = os.path.join(output_dir, build_type)

build_flags = {
    'macos': {
        'release': (['-O3', '-DNDEBUG', '-mmacosx-version-min=10.10', '-std=c++20'],),
        'debug': (['-g', '-O0', '-mmacosx-version-min=10.10', '-std=c++20'],),
        'profile': (['-pg', '-O2', '-mmacosx-version-min=10.10', '-std=c++20'],)
    },
    'linux': {
        'release': (['-O3', '-DNDEBUG', '-std=c++20'],),
        'debug': (['-g', '-O0', '-std=c++20'],),
        'profile': (['-pg', '-O2', '-std=c++20'],)
    },
    'windows': {
        'release': (['/O2', '/DNDEBUG', '/std:c++20'],),
        'debug': (['/DEBUG', '/Od', '/std:c++20'],),
        'profile': (['/PROFILE', '/O2', '/std:c++20'],)
    }
}

if platform in build_flags:
    if env["BUILD_TYPE"] in build_flags[platform]:
        print(f'Platform: {platform}')
        print(f'Build flags: {build_flags[platform][env["BUILD_TYPE"]]}')
        env.Append(CCFLAGS=build_flags[platform][env["BUILD_TYPE"]])
    else:
        print(f"Unknown build type:{env['BUILD_TYPE']}. Use 'release', 'debug', or 'profile'.")
else:
    print(f'Unknown platform: {platform}')

if env['COMPILEDB'] == 'true':
    env.Tool('compilation_db')
    compilation_db = env.CompilationDatabase()  # Generating the compile_commands.json
    if compilation_db:
        print("Generated compile_commands.json successfully.")
    else:
        print("Failed to generate compile_commands.json.")

static_library = env.StaticLibrary(target=os.path.join(output_dir, 'ewgd'), source=sources)
